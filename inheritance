#include <iostream>
using namespace std; 
class Base
{ 
    int x;
    public:
    // default constructor
    Base() 
    { 
        cout << "Base default constructor\n"; 
    }
};

class Derived : public Base
{ 
    int y;
    public:
    // default constructor
    Derived() 
    { 
        cout << "Derived default constructor\n"; 
    }
    // parameterized constructor
    Derived(int i) 
    { 
        cout << "Derived parameterized constructor\n"; 
    }
};

int main()
{
    Base b;        
    Derived d1;    
    Derived d2(10);
}
/*
Base default constructor
Base default constructor
Derived default constructor
Base default constructor
Derived parameterized constructor
*/

class A
{ 
    void show(); 
};

class B:public A 
{
    // class definition
};

class C:public A 
{
    // class defintion
};

class D:public B, public C 
{
    // class definition
};

int main()
{
    D obj;
    obj.show();
}


//VIrtual Base Class

class B : virtual public A 
{
    // class definition
};

class C : virtual public A 
{
    // class definition
};

class D : public B, public C 
{
    // class definition
};


/*Function Call Binding with class Objects
Connecting the function call to the function body is called Binding.
When it is done before the program is run, its called Early Binding or Static Binding
or Compile-time Binding.
*/
class Base
{
    public:
    void shaow()
    {
        cout << "Base class\n";
    }
};

class Derived:public Base
{
    public:
    void show()
    {
        cout << "Derived Class\n";
    }
}

int main()
{
    Base b;       //Base class object
    Derived d;     //Derived class object
    b.show();     //Early Binding Ocuurs
    d.show();   
}

Base class
Derived class


//Problem without Virtual Keyword


class Base
{
    public:
    void show()
    {
        cout << "Base class";
    }
};

class Derived:public Base
{
    public:
    void show()
    {
        cout << "Derived Class";
    }
}

int main()
{
    Base* b;       //Base class pointer
    Derived d;     //Derived class object
    b = &d;
    b->show();     //Early Binding Ocuurs
}

Base class
/*
When we use Base class's pointer to hold Derived class's object, base class pointer
 or reference will always call the base version of the function

Using Virtual Keyword in C++
We can make base class's methods virtual by using virtual keyword while
declaring them. Virtual keyword will lead to Late Binding of that method.
*/
class Base
{
    public:
    virtual void show()
    {
        cout << "Base class\n";
    }
};

class Derived:public Base
{
    public:
    void show()
    {
        cout << "Derived Class";
    }
}

int main()
{
    Base* b;       //Base class pointer
    Derived d;     //Derived class object
    b = &d;
    b->show();     //Late Binding Ocuurs
}

Derived class


PROGRAM FOR ABSTRACT CLASS

#include <iostream>
using namespace std;
// Abstract class
class Shape                   
{
    protected:
       float l;
    public:
       void getData()       
       {
           cin >> l;
       }     
       // virtual Function
       virtual float calculateArea() = 0;
};
class Square : public Shape
{
    public:
       float calculateArea()
       {   return l*l;  }
};
class Circle : public Shape
{
    public:
       float calculateArea()
       { return 3.14*l*l; }
};
int main()
{
    Square s;
    Circle c;
    cout << "Enter length to calculate the area of a square: ";
    s.getData();
    cout<<"Area of square: " << s.calculateArea();
    cout<<"\nEnter radius to calculate the area of a circle: ";
    c.getData();
    cout << "Area of circle: " << c.calculateArea();
    return 0;
}
Output

Enter length to calculate the area of a square: 4
Area of square: 16
Enter radius to calculate the area of a circle: 5
Area of circle: 78.5
